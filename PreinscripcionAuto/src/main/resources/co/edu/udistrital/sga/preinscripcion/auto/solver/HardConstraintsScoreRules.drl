

package org.edu.udistrital.sga.preinscripcion.auto.solver;
    dialect "mvel"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import co.edu.udistrital.sga.preinscripcion.auto.domain.AsignaturaGrupo;

import co.edu.udistrital.sga.preinscripcion.auto.domain.AsignaturaRequerida;
import co.edu.udistrital.sga.preinscripcion.auto.domain.DiasSemana;
import co.edu.udistrital.sga.preinscripcion.auto.domain.Estudiante;
import co.edu.udistrital.sga.preinscripcion.auto.domain.EstudianteXCurso;

import co.edu.udistrital.sga.preinscripcion.auto.domain.Horario;
import co.edu.udistrital.sga.preinscripcion.auto.domain.IntervaloDeTiempo;
import co.edu.udistrital.sga.preinscripcion.auto.domain.ProyectoCurricular;
import co.edu.udistrital.sga.preinscripcion.auto.domain.Ubicacion;

import co.edu.udistrital.sga.preinscripcion.auto.domain.PreinscripcionAsignaturasSolution;



import java.util.ArrayList;
import java.util.List;
import java.util.Map;

global HardSoftScoreHolder scoreHolder;
global java.lang.Integer creditosMaximos;


	function String buildKey(Integer courseIdOne, Integer courseIdTwo){
		String key=(courseIdOne<courseIdTwo?courseIdOne+"-"+courseIdTwo:courseIdTwo+"-"+courseIdOne);	
		return key;
	}
	
	function String buildKeyInverse(Integer courseIdOne, Integer courseIdTwo){
		String key=(courseIdOne<courseIdTwo?courseIdTwo+"-"+courseIdOne:courseIdOne+"-"+courseIdTwo);	
		return key;
	}

// ############################################################################
// Hard constraints
// ############################################################################

rule "setearVariablesGlobales"
salience 1000
lock-on-active
    when
       	eval(creditosMaximos == null)
    then
        drools.getWorkingMemory().setGlobal("creditosMaximos", Integer.valueOf(18) );
end

rule "asignaturasSoloProgramanUnavez"
    when       
       $cursoIzq : EstudianteXCurso(curso != null, estudiante!= null, $codAsignatura : codigoAsignatura , $idAsignatura : idAsignaturaGrupo  , $codEstudiante : estudianteCodigo)
       $cursoDer : EstudianteXCurso(curso != null, estudiante!= null, codigoAsignatura  == $codAsignatura ,  estudianteCodigo == $codEstudiante , idAsignaturaGrupo != $idAsignatura )
    then
        scoreHolder.addHardConstraintMatch(kcontext, - 2);
end

rule "programarCursoSoloUnaVez"
    when       
       $cursoIzq : EstudianteXCurso(curso != null, estudiante!= null, $idAsignatura : idAsignaturaGrupo  , $codEstudiante : estudianteCodigo)
       $cursoDer : EstudianteXCurso(curso != null, estudiante!= null, idAsignaturaGrupo == $idAsignatura , estudianteCodigo == $codEstudiante)
       eval($cursoIzq != $cursoDer)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - 2);
end

rule "programarSoloMateriasPreinscritasPorDemanda"
    when       
       $cursoIzq : EstudianteXCurso(curso != null, estudiante!= null, $codAsignatura : codigoAsignatura, listaCodigosPorDemanda not contains $codAsignatura)       
    then
        scoreHolder.addHardConstraintMatch(kcontext, -2);
end


rule "noPermitirCursosMismoHorario"
    when       
       $leftEstudianteCurso : EstudianteXCurso(curso != null, estudiante!= null, $leftCourseId : idAsignaturaGrupo, $codigoAlumno : estudianteCodigo )       
       $rightEstudianteCurso : EstudianteXCurso(curso != null, estudiante!= null, $rightCourseId : idAsignaturaGrupo, idAsignaturaGrupo != $leftCourseId,  estudianteCodigo  == $codigoAlumno )              
       eval($leftEstudianteCurso != $rightEstudianteCurso)
       $mapa : Map(this[buildKey($leftCourseId,$rightCourseId)] > 0);       
    then
        scoreHolder.addHardConstraintMatch(kcontext, -2);
end

rule "noPermitirCursosHomologados"
    when       
       $leftEstudianteCurso : EstudianteXCurso(curso != null, estudiante!= null, $leftCourseId : idAsignaturaGrupo, $codigoAlumno : estudianteCodigo )       
       $rightEstudianteCurso : EstudianteXCurso(curso != null, estudiante!= null, $rightCourseId : idAsignaturaGrupo, idAsignaturaGrupo != $leftCourseId,  estudianteCodigo  == $codigoAlumno )              
       eval($leftEstudianteCurso != $rightEstudianteCurso)
       $mapa : Map(this[buildKeyInverse($leftCourseId,$rightCourseId)] > 0);       
    then
        scoreHolder.addHardConstraintMatch(kcontext, -2);
end

rule "estudianteNoPuedeExcederCreditos" 
    when    
       $leftEstudianteCurso : EstudianteXCurso(curso != null, estudiante!= null, $estudianteRef : estudiante )  
       $sumaCreditosEstudiante : Number() from accumulate(EstudianteXCurso(curso != null, estudiante == $estudianteRef, $creditos : creditos ), sum($creditos))
       eval($sumaCreditosEstudiante > creditosMaximos)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -2);        
end


rule "cursosNoSobreOcupados" 
    when
       $estudianteCurso : EstudianteXCurso(curso != null, $cursoReferencia : curso, $cuposCurso : cupos)
       $estudiantesProgramadosCount : Long() from accumulate($cursoReferenciado : EstudianteXCurso(curso != null, estudiante != null,curso == $cursoReferencia, $estudianteCount : estudiante), count($estudianteCount))       
       eval($cuposCurso<$estudiantesProgramadosCount.intValue())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -2);
end





