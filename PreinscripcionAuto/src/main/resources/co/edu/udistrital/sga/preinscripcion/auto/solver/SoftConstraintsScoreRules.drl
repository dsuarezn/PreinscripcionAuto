


package org.edu.udistrital.sga.preinscripcion.auto.solver;
    dialect "mvel"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import co.edu.udistrital.sga.preinscripcion.auto.domain.Asignatura;
import co.edu.udistrital.sga.preinscripcion.auto.domain.AsignaturaGrupo;
import co.edu.udistrital.sga.preinscripcion.auto.domain.AsignaturaPlaneada;
import co.edu.udistrital.sga.preinscripcion.auto.domain.AsignaturaRequerida;
import co.edu.udistrital.sga.preinscripcion.auto.domain.DiasSemana;
import co.edu.udistrital.sga.preinscripcion.auto.domain.Estudiante;
import co.edu.udistrital.sga.preinscripcion.auto.domain.EstudianteXCurso;
import co.edu.udistrital.sga.preinscripcion.auto.domain.Grupo;
import co.edu.udistrital.sga.preinscripcion.auto.domain.Horario;
import co.edu.udistrital.sga.preinscripcion.auto.domain.IntervaloDeTiempo;
import co.edu.udistrital.sga.preinscripcion.auto.domain.Pensum;
import co.edu.udistrital.sga.preinscripcion.auto.domain.PlanDeEstudios;
import co.edu.udistrital.sga.preinscripcion.auto.domain.PreinscripcionAsignaturasSolution;
import co.edu.udistrital.sga.preinscripcion.auto.domain.ProyectoCurricular;
import co.edu.udistrital.sga.preinscripcion.auto.domain.Ubicacion;
import co.edu.udistrital.sga.preinscripcion.auto.domain.solver.ConflictoCursos;
import java.util.ArrayList;
import java.util.List;
import java.lang.Double;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;


global HardSoftScoreHolder scoreHolder;
global java.lang.Integer creditosMaximos;

	function Double valorarCompletitudAsignaturas(List listaMateriasInscritas, List listaPreinsPorDemanda){
		if(listaMateriasInscritas.size()<1){return 0D;}
		if(listaPreinsPorDemanda.size()<1){return 0D;}
		Long valor = 0L;
		for (Object asignaturacod : listaPreinsPorDemanda) {
			Long codigoAsig=(Long)asignaturacod;
			if(listaMateriasInscritas.contains(codigoAsig)){
				valor=valor+1;
			}
		}
		Double completitud=(valor.doubleValue()/(listaPreinsPorDemanda.size()));
		return  completitud;		
	}


	function Double calcularScoreCompletitudAsignaturas(Integer clasificacion, Double porcentajeCompletitud){		
		if(clasificacion<1){
			return 0.1 * porcentajeCompletitud;
		}	
		Double calculo = (10/clasificacion.doubleValue())*(porcentajeCompletitud*10);	
		return calculo;
	}
/*
	function Integer scoreHorariosCompactos(List listaEstudiantesXCurso, Integer valor){
		valor=0;
		Integer scoreNegativoAcumulado = 0;
		List listaHorarios=new ArrayList();
		Map<String, List> mapaHorarios=new HashMap<>();
		for (Object element : listaEstudiantesXCurso) {	
			EstudianteXCurso estCurso = (EstudianteXCurso)element;							
			for(Horario horario : estCurso.getHorarios()){	
				List horariosDia = mapaHorarios.get(horario.getNombreDia());			
				if(horariosDia==null){
					horariosDia=new ArrayList();
				}
				horariosDia.addAll(horario.getFranjasEnteras());
				mapaHorarios.put(horario.getNombreDia(),horariosDia);
			}				
		}
		
		for (String entradas : mapaHorarios.keySet())
		{
		    scoreNegativoAcumulado+=carcularScoreNegativo(mapaHorarios.get(entradas));
		}
		 System.out.println("-------------------inner function--------------------------:"+scoreNegativoAcumulado);		
		return scoreNegativoAcumulado;
	}
	
	function Integer carcularScoreNegativo(List espacios)
	{
		Collections.sort(espacios);
		Integer valorIteracion=(Integer)espacios.get(0);
		Integer conteo=0;
		for(int iterador=1;iterador<espacios.size();iterador++){
			Integer conteoInterno=0;
			if(!espacios.get(iterador).equals(valorIteracion+1)){
				conteoInterno=((Integer)espacios.get(iterador))-(valorIteracion+1);
				conteo+=conteoInterno;
			}
			valorIteracion+=conteoInterno+1;
		}
		return conteo;
	}
	*/

	// ############################################################################
	// soft constraints
	// ############################################################################
	rule "peorPuntajeMasNulos" 
	    when	     
	       $estudianteCurso : EstudianteXCurso(curso == null, estudiante != null)
	    then
	       scoreHolder.addSoftConstraintMatch(kcontext, -20);
	end

	
	rule "peorPuntajeMateriasMenosCompactas" 
	    when
	       $estudianteCurso : EstudianteXCurso(curso != null, estudiante != null, $estudianteRef : estudiante)
	       $sumaEspacios : Integer() from accumulate(EstudianteXCurso(curso != null, estudiante == $estudianteRef, horarios != null, $horarios : horarios), calcularHorariosNegativeScore($horarios))
	    then
	       scoreHolder.addSoftConstraintMatch(kcontext, - ($sumaEspacios*2));
	end
	
	
	
	rule "mejorPuntajeEstudiantesRankingAlto" 
	    when
	       $estudianteCurso : EstudianteXCurso(curso != null, estudiante != null, $estudianteRef : estudiante, $listaCodigosDemanda : listaCodigosPorDemanda)
	       $listaCodigos : ArrayList() from accumulate(EstudianteXCurso(curso != null, estudiante != null, estudiante == $estudianteRef, $cursoRef : curso), acumularListaCodAsignatura($cursoRef.getCodigoAsignatura()))    	       
	    then
	       scoreHolder.addSoftConstraintMatch(kcontext,calcularScoreCompletitudAsignaturas($estudianteRef.getClasificacion(),valorarCompletitudAsignaturas($listaCodigos, $listaCodigosDemanda)).intValue());
	end
	
/*	
	rule "peorPuntajeTodasMateriasNull" 
	    when
	       $estudianteCurso : EstudianteXCurso(curso != null, estudiante != null, $estudianteRef : estudiante, $listaCodigosDemanda : listaCodigosPorDemanda)
	       $cantidadOpciones : Integer() from accumulate(EstudianteXCurso(estudiante != null, estudiante == $estudianteRef, $estRef : estudiante), count($estRef))   
	       $opcionesNulas : Integer() from accumulate(EstudianteXCurso(estudiante != null, estudiante == $estudianteRef, curso == null, $estRefNula : estudiante), count($estRefNula))    	       
	       eval($cantidadOpciones==$opcionesNulas)
	    then
	       scoreHolder.addSoftConstraintMatch(kcontext,-300);
	end
*/
rule "mejorAsignaturasProgramadasRanking" 
    when
       $estudianteCurso : EstudianteXCurso(curso != null, $cursoReferencia : curso, cupos > 0, $cuposCurso : cupos, $asingRanking : ranking )
       $estudiantesProgramadosCount : Long() from accumulate($cursoReferenciado : EstudianteXCurso(curso != null, estudiante != null,curso == $cursoReferencia, $estudianteCount : estudiante), count($estudianteCount))                     
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $asingRanking*($estudiantesProgramadosCount/$cuposCurso));
end
